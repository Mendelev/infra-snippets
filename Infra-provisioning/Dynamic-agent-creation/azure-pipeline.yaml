trigger: none
pr: none

resources:
- repo: self

pool:
  vmImage: ubuntu-latest

variables:
  - group: AWS-EC2

jobs:
- job: CreateMachine
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
  - bash: |
      cd Infra-provisioning/Dynamic-agent-creation/
      pip3 install -r requirements.txt
  - task: PythonScript@0
    inputs:
      scriptSource: 'filePath'
      scriptPath: 'Infra-provisioning/Dynamic-agent-creation/manage_vm.py'
      arguments: 'criar ami-01c3b2b5a7663b7aa'
    name: runScriptThatCreatesMachine
    continueOnError: false  # Garantir que o job falhe se algo der errado
    env:  # Passando as variáveis de ambiente da AWS corretamente
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
      AWS_REGION: $(AWS_REGION)
  - bash: |
        sleep 180s

- job: GrabData
  dependsOn: CreateMachine
  condition: succeeded('CreateMachine')
  variables:
    InstanceID: $[ dependencies.CreateMachine.outputs['runScriptThatCreatesMachine.INSTANCE_ID'] ]    
  pool:
    name: Default
    demands:
    - agent.name -equals my-agent-$(InstanceID)
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'  # Usar versão adequada do Python
        addToPath: true
    - script: |
        pip3 install -r requirements.txt
        python /home/ubuntu/my_script.py
      displayName: 'Run my_script.py script'

## Job that deletes the windows machine on AWS

- job: TerminateMachine
  dependsOn:
    - CreateMachine 
    - GrabData
  condition: succeeded('CreateMachine')
  variables:
    InstanceID: $[ dependencies.CreateMachine.outputs['runScriptThatCreatesMachine.INSTANCE_ID'] ]
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
  - bash: |
      cd Infra-provisioning/Dynamic-agent-creation/
      pip3 install -r requirements.txt
  - task: PythonScript@0
    inputs:
      scriptSource: 'filePath'
      scriptPath: 'Infra-provisioning/Dynamic-agent-creation/manage_vm.py'
      arguments: "excluir $(InstanceID)"
    continueOnError: false  # Garantir que o job falhe se algo der errado
    env:  # Passando as variáveis de ambiente da AWS corretamente
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
      AWS_REGION: $(AWS_REGION)
